#!/usr/bin/env ruby


# TAGS

# for each tag, make an item called /blog/tags/tagname
preprocess do
  tags = @items.map { |i| i[:tags] }.flatten.uniq
  tags.each do |tag|
    next unless tag
    content = ''
    attributes = { tag: tag, title: "#{tag} posts" }
    identifier = "/blog/tags/#{tag}"
    @items.create(content, attributes, identifier)
  end
  # Delete draft posts
  @items.delete_if do |item|
    # (item[:created_at] > Date.today if item[:created_at]) || (item[:draft] == true)
    (item[:draft] == true)
  end
end

# make pages for each tag item that we made in the preprocessing
compile '/blog/tags/*' do
  layout '/Tags.*'
  write "/blog/tags/#{item.identifier.to_s.split('/')[-1]}/index.html"
end


# STATIC PAGES

# take the /content/index.hmtl file and filter it with erb (passing it through
# the layout "Default") and make a file /index.html in the output directory
compile '/index.html' do
  filter :erb
  layout '/Default.*'
  write '/index.html'
end

# take all other other .html files in /content and filter them with erb (passing
# them through the layout "Default") and make a file /filename/index.html in the
# output directory (so that we can go to e.g. website.com/projects instead of
# having to go to website.com/projects.html)
compile '/**/*.html' do
  filter :erb
  layout '/Default.*'
  write item.identifier.without_ext + '/index.html'
end


# BLOG POSTS

# take all the .md files in /blog and filter them with pandoc, using the katex
# parser (which doesn't actually really do much) (passing them through the
# layout "Post") and making a file /blog/y/m/d/name/index.html,
# where y, m, d, and name all come from the title of the file
compile "/blog/*/index.md" do
  filter :pandoc, args: [
    :katex
  ]
  layout '/Post.*'
  filter :add_toc
  y,m,d,slug = /([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)\/index.md/.match(item.identifier.to_s).captures
  write "/blog/#{y}/#{m}/#{d}/#{slug}/index.html"
end
compile "/blog/*/*" do 
  write(item.identifier.to_s)
  y,m,d,slug,image = /([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)\/(.*)/.match(item.identifier.to_s).captures
  write "/blog/#{y}/#{m}/#{d}/#{slug}/#{image}"
end


# OTHER

# generate the RSS feed
compile '/blog/feed.*' do
  filter :erb
  write '/blog.xml'
end

# any files in /content left untouched? just copy them over the the output
# directory exactly as they are
passthrough '/**/*'

# any layout that we haven't explicitly mentioned above should also be parsed
# with erb (assuming that all our layouts are erb files!)
layout '/**/*', :erb
